<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="IllegalContextReuse" xml:space="preserve">
    <value>A binary context object was re-initialized with a new file path.</value>
  </data>
  <data name="MetadataCondition_ImageIsMixedModeBinary" xml:space="preserve">
    <value>image is a mixed mode binary</value>
  </data>
  <data name="MetadataCondition_CouldNotLoadPdb" xml:space="preserve">
    <value>an exception occurred attempting to load its pdb</value>
  </data>
  <data name="MetadataCondition_ImageCompiledWithOutdatedTools" xml:space="preserve">
    <value>image was compiled with a toolset version ({0}) that is not sufficiently recent ({1} or newer) to provide relevant settings</value>
  </data>
  <data name="MetadataCondition_ImageIs64BitBinary" xml:space="preserve">
    <value>image is a 64-bit binary</value>
  </data>
  <data name="MetadataCondition_ImageIsDotNetNativeBinary" xml:space="preserve">
    <value>image is a binary built by the .NET native toolset</value>
  </data>
  <data name="MetadataCondition_ImageIsILOnlyManagedAssembly" xml:space="preserve">
    <value>image is an IL-only managed assembly</value>
  </data>
  <data name="MetadataCondition_ImageIsKernelModeBinary" xml:space="preserve">
    <value>image is a kernel mode binary</value>
  </data>
  <data name="MetadataCondition_ImageIsManagedInteropAssembly" xml:space="preserve">
    <value>image is a managed interop assembly</value>
  </data>
  <data name="MetadataCondition_ImageIsManagedResourceOnlyAssembly" xml:space="preserve">
    <value>image is a managed resource-only assembly</value>
  </data>
  <data name="MetadataCondition_ImageIsNot32BitBinary" xml:space="preserve">
    <value>image is not a 32-bit binary</value>
  </data>
  <data name="MetadataCondition_ImageIsNot64BitBinary" xml:space="preserve">
    <value>image is not a 64-bit binary</value>
  </data>
  <data name="MetadataCondition_ImageIsNotSigned" xml:space="preserve">
    <value>image is not signed </value>
  </data>
  <data name="MetadataCondition_ImageIsPreVersion7WindowsCEBinary" xml:space="preserve">
    <value>image is a pre-version 7 Windows CE binary</value>
  </data>
  <data name="MetadataCondition_ImageIsResourceOnlyBinary" xml:space="preserve">
    <value>image is a resource-only binary</value>
  </data>
  <data name="MetadataCondition_ImageIsXboxBinary" xml:space="preserve">
    <value>image is an xbox binary</value>
  </data>
  <data name="MetadataCondition_ImageIsKernelModeAndNot64Bit_CfgUnsupported" xml:space="preserve">
    <value>image is not 64-bit (the only architecture that enables CFG for kernel mode binaries)</value>
  </data>
  <data name="RuleWasDisabledDueToMissingPolicy" xml:space="preserve">
    <value>Check '{0}' was disabled for this run as the analysis was not configured with required policy ({1}). To resolve this, configure and provide a policy file on the BinSkim command-line using the --policy argument (recommended), or pass --defaultPolicy to invoke built-in settings. Invoke the BinSkim.exe 'export' command to produce an initial policy file that can be edited if required and passed back into the tool.</value>
  </data>
  <data name="TargetNotAnalyzed_NotAPortableExecutable" xml:space="preserve">
    <value>'{0}' was not analyzed as it does not appear to be a valid portable executable.</value>
  </data>
  <data name="TargetNotAnalyzed_NotApplicable" xml:space="preserve">
    <value>'{0}' was not evaluated for check '{1}' as the analysis is not relevant based on observed binary metadata: {2}.</value>
  </data>
  <data name="MetadataCondition_ImageIsNotExe" xml:space="preserve">
    <value>image is not an executable program</value>
  </data>
  <data name="MetadataCondition_ImageIsBootBinary" xml:space="preserve">
    <value>image is a boot binary</value>
  </data>
</root>